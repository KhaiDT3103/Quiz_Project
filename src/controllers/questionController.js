const { User, SubSubject, Question, Answer } = require("../models");
const { Sequelize } = require("sequelize");
const moment = require("moment-timezone");
//L·∫•y c√¢u h·ªèi theo m√¥n h·ªçc tƒÉng d·∫ßn theo ƒë·ªô kh√≥
exports.getAllQuestionBySubjectID = async (req, res) => {
    try {
        const { subject_id } = req.params;

        // Ki·ªÉm tra xem m√¥n h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
        const subjectExists = await SubSubject.findByPk(subject_id);
        if (!subjectExists) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√¥n h·ªçcüëπ" });
        }

        // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi thu·ªôc m√¥n h·ªçc, s·∫Øp x·∫øp theo ƒë·ªô kh√≥
        let questions = await Question.findAll({
            include: [{
                model: Answer,
                as: "answers",
                attributes: ["answer_id", "answer_text", "is_correct"],
            }],
            where: { subject_id },
            order: [[Sequelize.literal("FIELD(difficulty, 'easy', 'medium', 'hard')")]] // S·∫Øp x·∫øp theo ƒë·ªô kh√≥
        });


        res.json({ subject: subjectExists.name, questions });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message || error });
    }
};
//L·∫•y t·∫•t c·∫£ c√¢u h·ªèi theo user_id
exports.getAllQuestionByUserID = async (req, res) => {
    try {
        const { user_id } = req.params;

        // Ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
        const userExists = await User.findByPk(user_id);
        if (!userExists) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng üëπ" });
        }

        // L·∫•y t·∫•t c·∫£ c√¢u h·ªèi theo user_id, s·∫Øp x·∫øp theo ƒë·ªô kh√≥
        const questions = await Question.findAll({
            include: [{
                model: Answer,
                as: "answers",
                attributes: ["answer_id", "answer_text", "is_correct"],
            }],
            where: { created_by: user_id },
            order: [[Sequelize.literal("FIELD(difficulty, 'easy', 'medium', 'hard')")]]
        });

        res.json({ user: userExists.username, questions });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message || error });
    }
};


//Th√™m c√¢u h·ªèi k√®m c√¢u tr·∫£ l·ªùi
exports.createQuestion = async (req, res) => {
    try {
        const { subject_id, question_text, difficulty, created_by, answers } = req.body;

        // Ki·ªÉm tra d·ªØ li·ªáu ƒë·∫ßu v√†o
        if (!subject_id || !question_text || !difficulty || !created_by || !answers || !Array.isArray(answers) || answers.length === 0) {
            return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin, bao g·ªìm danh s√°ch c√¢u tr·∫£ l·ªùiüëπ" });
        }

        // Ki·ªÉm tra xem m√¥n h·ªçc c√≥ t·ªìn t·∫°i kh√¥ng
        const subjectExists = await SubSubject.findByPk(subject_id);
        if (!subjectExists) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y m√¥n h·ªçcüëπ" });
        }

        // Ki·ªÉm tra xem user c√≥ t·ªìn t·∫°i kh√¥ng
        const userExists = await User.findByPk(created_by);
        if (!userExists) {
            return res.status(404).json({ message: "Kh√¥ng t·ªìn t·∫°i user n√†yüëπ" });
        }

        // L·∫•y th·ªùi gian hi·ªán t·∫°i
        const createdAt = moment().tz("Asia/Ho_Chi_Minh").format("YYYY-MM-DD HH:mm:ss");
        const updatedAt = createdAt;

        // B·∫Øt ƒë·∫ßu transaction ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh to√†n v·∫πn d·ªØ li·ªáu
        const newQuestion = await Question.create(
            { subject_id, question_text, difficulty, created_by, createdAt, updatedAt },
            { returning: true }
        );

        // L·∫•y ID c·ªßa c√¢u h·ªèi m·ªõi
        const question_id = newQuestion.question_id;

        // Th√™m c√°c c√¢u tr·∫£ l·ªùi
        const answersData = answers.map(answer => ({
            question_id,
            answer_text: answer.answer_text,
            is_correct: answer.is_correct ? 1 : 0
        }));

        // L∆∞u c√¢u tr·∫£ l·ªùi v√†o database
        await Answer.bulkCreate(answersData);

        // Tr·∫£ v·ªÅ k·∫øt qu·∫£
        res.status(201).json({
            message: "C√¢u h·ªèi v√† c√¢u tr·∫£ l·ªùi ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ngüëπ",
            question: newQuestion,
            answers: answersData
        });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error: error.message || error });
    }
};
//Xo√° c√¢u h·ªèi
exports.deleteQuestion = async (req, res) => {
    try {
        const { question_id } = req.params;

        // Ki·ªÉm tra xem c√¢u h·ªèi c√≥ t·ªìn t·∫°i kh√¥ng
        const question = await Question.findByPk(question_id);
        if (!question) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèiüëπ" });
        }

        // X√≥a t·∫•t c·∫£ c√¢u tr·∫£ l·ªùi c·ªßa c√¢u h·ªèi n√†y
        await Answer.destroy({ where: { question_id } });

        // Sau khi x√≥a c√¢u tr·∫£ l·ªùi, x√≥a c√¢u h·ªèi
        await question.destroy();

        res.status(200).json({ message: `C√¢u h·ªèi v√† c√°c c√¢u tr·∫£ l·ªùi li√™n quan ƒë√£ b·ªã x√≥aüëπ`, status: true });
    } catch (error) {
        res.status(500).json({ message: "L·ªói serverüëπ", status: false, error: error.message || error });
    }
};

//S·ª≠a c√¢u h·ªèi
exports.updateQuestionWithAnswers = async (req, res) => {
    try {
        const { question_id } = req.params;
        const { question_text, difficulty, subject_id, answers } = req.body;

        const question = await Question.findByPk(question_id, {
            include: [{ model: Answer, as: "answers" }]
        });

        if (!question) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y c√¢u h·ªèi üëπ" });
        }

        // C·∫≠p nh·∫≠t c√¢u h·ªèi
        question.question_text = question_text || question.question_text;
        question.difficulty = difficulty || question.difficulty;
        question.subject_id = subject_id || question.subject_id;
        await question.save();

        // C·∫≠p nh·∫≠t t·ª´ng ƒë√°p √°n
        if (Array.isArray(answers)) {
            for (const updatedAnswer of answers) {
                const answer = await Answer.findByPk(updatedAnswer.answer_id);
                if (answer && answer.question_id === question.question_id) {
                    answer.answer_text = updatedAnswer.answer_text;
                    answer.is_correct = updatedAnswer.is_correct;
                    await answer.save();
                }
            }
        }

        res.json({ message: "C·∫≠p nh·∫≠t c√¢u h·ªèi th√†nh c√¥ng üëπ", status: true, question });
    } catch (error) {
        console.error(error);
        res.status(500).json({ message: "L·ªói server üëπ", status: false, error: error.message });
    }
};
