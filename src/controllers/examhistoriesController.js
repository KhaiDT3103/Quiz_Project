const { Exam, User, Question, Answer, ExamHistories, ExamHistoryAns } = require("../models");
const { Sequelize } = require("sequelize");
const moment = require("moment-timezone");

exports.getHisByUser = async (req, res) => {
    try {
        const { user_id } = req.params;
        if (!user_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ ng∆∞·ªùi d√πngüëπ" });
        }

        // T√¨m l·ªãch s·ª≠ thi c·ªßa ng∆∞·ªùi d√πng, k√®m theo th√¥ng tin b√†i thi, ng∆∞·ªùi d√πng v√† c√¢u tr·∫£ l·ªùi
        const His = await ExamHistories.findAll({
            where: { user_id: user_id },
            include: [
                {
                    model: Exam,
                    as: "exam", // alias trong m·ªëi quan h·ªá
                    attributes: ["exam_id", "title", "description"] // L·∫•y c√°c th√¥ng tin c·ªßa b√†i thi
                },
                {
                    model: ExamHistoryAns, // K·∫øt h·ª£p v·ªõi b·∫£ng ExamHistoryAns
                    as: "examhisans", // alias trong m·ªëi quan h·ªá
                    attributes: ["id", "question_id", "selected_answer_id", "is_correct"], // C√°c th√¥ng tin c·∫ßn l·∫•y t·ª´ ExamHistoryAns
                    include: [
                        {
                            model: Question, // Gi·∫£ s·ª≠ b·∫°n c≈©ng mu·ªën l·∫•y th√¥ng tin c√¢u h·ªèi
                            as: "question", // alias trong m·ªëi quan h·ªá
                            attributes: ["question_text"] // L·∫•y th√¥ng tin c√¢u h·ªèi
                        },
                        {
                            model: Answer, // Gi·∫£ s·ª≠ b·∫°n c≈©ng mu·ªën l·∫•y th√¥ng tin c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn
                            as: "selectedAnswer", // alias trong m·ªëi quan h·ªá
                            attributes: ["answer_text"] // L·∫•y th√¥ng tin c√¢u tr·∫£ l·ªùi ƒë√£ ch·ªçn
                        }
                    ]
                }
            ]
        });

        if (!His || His.length === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y l·ªãch s·ª≠ thi c·ªßa ng∆∞·ªùi d√πng üëπ" });
        }

        res.json({ user_id, histories: His });
    } catch (error) {
        res.status(500).json({ message: "L·ªói serverüëπ", error: error.message });
    }
};

