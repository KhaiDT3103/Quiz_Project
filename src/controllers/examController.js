const { SubSubject, User, Exam, ExamQuestion, Question, Answer } = require("../models");
const { Sequelize } = require("sequelize");
const moment = require("moment-timezone");
const question = require("../models/question");
//Get All Exam by subjectID
exports.getAllExamsBySubjectID = async (req, res) => {
    try {
        const { subsubject_id } = req.params;
        if (!subsubject_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ m√¥n h·ªçcüëπ" });
        }
        const exams = await Exam.findAll({
            where: { subsubject_id }, // ƒêi·ªÅu ki·ªán l·ªçc
            include: [
                {
                    model: SubSubject,
                    as: "subsubject",
                    attributes: ["subsubjects_id", "subject_name"]
                }
            ],
            order: [["createdAt", "DESC"]] // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t
        });

        res.json(exams);
    } catch (error) {
        res.status(500).json({ message: "L·ªói serverüëπ", error });
    }
};
//Get All Exam by subjectID with Question
exports.getAllExamsBySubjectIDWithQuestion = async (req, res) => {
    try {
        const { subsubject_id } = req.params;
        if (!subsubject_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ m√¥n h·ªçcüëπ" });
        }

        const exams = await Exam.findAll({
            where: { subsubject_id }, // L·ªçc theo m√¥n h·ªçc
            include: [
                {
                    model: SubSubject,
                    as: "subsubject",
                    attributes: ["subsubjects_id", "subject_name"]
                },
                {
                    model: Question,
                    as: "question", // L·∫•y danh s√°ch c√¢u h·ªèi
                    through: { attributes: [] }, // Lo·∫°i b·ªè d·ªØ li·ªáu trung gian c·ªßa b·∫£ng ExamQuestion
                    include: [
                        {
                            model: Answer, // L·∫•y danh s√°ch c√¢u tr·∫£ l·ªùi
                            as: "answers",
                            attributes: ["answer_id", "answer_text", "is_correct"]
                        }
                    ]
                }
            ],
            order: [["createdAt", "DESC"]] // S·∫Øp x·∫øp theo th·ªùi gian m·ªõi nh·∫•t
        });

        res.json(exams);
    } catch (error) {
        res.status(500).json({ message: "L·ªói serverüëπ", error });
    }
};

//Get All Exam by user_id
exports.getAllExamsByUserID = async (req, res) => {
    try {
        const { user_id } = req.params;
        if (!user_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ ng∆∞·ªùi d√πngüëπ" });
        }
        const exams = await Exam.findAll({
            where: { created_by: user_id }, // ƒêi·ªÅu ki·ªán l·ªçc
            include: [
                {
                    model: SubSubject,
                    as: "subsubject",
                    attributes: ["subsubjects_id", "subject_name"]
                },
                {
                    model: User,
                    as: "creator", // ƒê√∫ng alias ƒë√£ ƒë·ªãnh nghƒ©a trong model
                    attributes: ["user_id", "username", "email"]
                },
                {
                    model: Question,
                    as: "question",
                    through: { attributes: [] }, // Kh√¥ng l·∫•y d·ªØ li·ªáu t·ª´ b·∫£ng trung gian
                    include: [
                        {
                            model: Answer,
                            as: "answers",
                            attributes: ["answer_id", "answer_text", "is_correct"]
                        }
                    ]
                }
            ],
            order: [["createdAt", "DESC"]] // S·∫Øp x·∫øp theo th·ªùi gian t·∫°o m·ªõi nh·∫•t
        });

        res.json(exams);
    } catch (error) {
        res.status(500).json({ message: "L·ªói serverüëπ", error });
    }
};

exports.createExam = async (req, res) => {
    try {
        const { title, description, time, created_by, subsubject_id, question_ids } = req.body;

        if (!title || !description || !time || !created_by || !subsubject_id || !Array.isArray(question_ids)) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin ho·∫∑c danh s√°ch c√¢u h·ªèi kh√¥ng h·ª£p l·ªáüëπ" });
        }

        // T·∫°o b√†i thi
        const newExam = await Exam.create({ title, description, time, created_by, subsubject_id });

        // T·∫°o danh s√°ch b·∫£n ghi li√™n k·∫øt c√¢u h·ªèi v√† b√†i thi
        const examQuestionData = question_ids.map(qid => ({
            exam_id: newExam.exam_id,
            question_id: qid
        }));

        // Th√™m v√†o b·∫£ng examquestion
        await ExamQuestion.bulkCreate(examQuestionData);

        res.status(201).json({
            message: "B√†i thi ƒë√£ ƒë∆∞·ª£c t·∫°o v√† g√°n c√¢u h·ªèi th√†nh c√¥ng üëπ",
            exam: newExam,
            totalQuestionsLinked: question_ids.length
        });

    } catch (error) {
        res.status(500).json({ message: "L·ªói server üëπ", error: error.message || error });
    }
};

exports.deleteExamWithQuestions = async (req, res) => {
    try {
        const { exam_id } = req.params;

        if (!exam_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ b√†i thi üëπ", deleted: false });
        }

        // X√≥a t·∫•t c·∫£ li√™n k·∫øt c√¢u h·ªèi c·ªßa exam trong b·∫£ng trung gian
        await ExamQuestion.destroy({
            where: { exam_id }
        });

        // X√≥a b√†i thi
        const deleted = await Exam.destroy({
            where: { exam_id }
        });

        if (deleted === 0) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi ƒë·ªÉ x√≥a üëπ", deleted: false });
        }

        res.json({ message: "ƒê√£ x√≥a b√†i thi üëπ", deleted: true });
    } catch (error) {
        res.status(500).json({ message: "L·ªói server üëπ", error: error.message || error, deleted: false });
    }
};

//L·∫•y d·ªØ li·ªáu m·ªôt b√†i thi b·∫±ng exam id
exports.getExamByID = async (req, res) => {
    try {
        const { exam_id } = req.params;
        if (!exam_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ b√†i thi üëπ" });
        }

        const exam = await Exam.findOne({
            where: { exam_id },
            attributes: ["exam_id", "title", "description"],
            include:
            {
                model: Question,
                as: "question", // alias trong model Exam
                attributes: ["question_id", "question_text"],
                through: { attributes: [] },
                include:
                {
                    model: Answer,
                    as: "answers", // alias trong model Question
                    attributes: ["answer_id", "answer_text", "is_correct"]
                }
            }

        });

        if (!exam) {
            return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi üëπ" });
        }

        res.json(exam);
    } catch (error) {
        res.status(500).json({ message: "L·ªói serverüëπ", error: error.message });
    }
};

exports.updateExamAndQuestions = async (req, res) => {
    try {
        const { exam_id } = req.params;
        const { title, description, questions } = req.body;

        if (!exam_id) {
            return res.status(400).json({ message: "Thi·∫øu m√£ b√†i thi üëπ" });
        }

        const exam = await Exam.findByPk(exam_id);
        if (!exam) return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y b√†i thi üëπ" });

        // Ch·ªâ c·∫≠p nh·∫≠t n·∫øu c√≥ title ho·∫∑c description
        if (title || description) {
            await exam.update({
                title: title ?? exam.title,
                description: description ?? exam.description
            });
        }

        // C·∫≠p nh·∫≠t c√¢u h·ªèi n·∫øu c√≥
        if (Array.isArray(questions)) {
            for (const q of questions) {
                if (!q.question_id) continue;

                const question = await Question.findByPk(q.question_id);
                if (!question) continue;

                if (q.question_text) {
                    await question.update({ question_text: q.question_text });
                }

                if (Array.isArray(q.answers)) {
                    for (const ans of q.answers) {
                        if (!ans.answer_id) continue;

                        const answer = await Answer.findByPk(ans.answer_id);
                        if (!answer) continue;

                        await answer.update({
                            answer_text: ans.answer_text ?? answer.answer_text,
                            is_correct: ans.is_correct ?? answer.is_correct
                        });
                    }
                }
            }
        }

        res.json({ message: "C·∫≠p nh·∫≠t b√†i thi th√†nh c√¥ng ‚úÖ" });

    } catch (error) {
        res.status(500).json({ message: "L·ªói server üëπ", error: error.message });
    }
};
